-- Declare the SQL type for the PL/SQL type ETH_COMMON_SERVICES_PKG.IDVAL_REC
-- uncomment to overwrite existing types
-- CREATE OR REPLACE TYPE ETH_COMMON_SERVICX111792X7X5 AS OBJECT (
--       ID NUMBER,
--       VALUE VARCHAR2(60)-- 
-- );
-- /
-- show errors
-- uncomment to overwrite existing types
-- CREATE OR REPLACE TYPE ETH_COMMON_SERVICX111792X7X4 AS TABLE OF ETH_CUSTOM_SCHEMA.ETH_COMMON_SERVICX111792X7X5; 
-- /
-- show errors
-- Declare package containing conversion functions between SQL and PL/SQL types
CREATE OR REPLACE PACKAGE ETH_COMMON_COMPLIANCE_WRAA AS
	-- Declare the conversion functions the PL/SQL type ETH_COMMON_SERVICES_PKG.IDVAL_REC
	FUNCTION PL_TO_SQL0(aPlsqlItem ETH_COMMON_SERVICES_PKG.IDVAL_REC)
 	RETURN ETH_COMMON_SERVICX111792X7X5;
	FUNCTION SQL_TO_PL1(aSqlItem ETH_COMMON_SERVICX111792X7X5)
	RETURN ETH_COMMON_SERVICES_PKG.IDVAL_REC;
	-- Declare the conversion functions the PL/SQL type ETH_COMMON_SERVICES_PKG.IDVAL_TAB
	FUNCTION PL_TO_SQL1(aPlsqlItem ETH_COMMON_SERVICES_PKG.IDVAL_TAB)
 	RETURN ETH_COMMON_SERVICX111792X7X4;
	FUNCTION SQL_TO_PL0(aSqlItem ETH_COMMON_SERVICX111792X7X4)
	RETURN ETH_COMMON_SERVICES_PKG.IDVAL_TAB;
   PROCEDURE eth_common_services_pkg$eth_c (P_CALLER_NAME VARCHAR2,
	P_SOA_INSTANCE_ID VARCHAR2,
	P_TXN_RECORD_ID NUMBER,
	P_IDVAL_TAB ETH_CUSTOM_SCHEMA.ETH_COMMON_SERVICX111792X7X4,
	P_RESPONSECODE OUT NUMBER,
	P_ERRORCODENUMBER OUT VARCHAR2,
	P_ERRORDESCRIPTION OUT VARCHAR2
	);
END ETH_COMMON_COMPLIANCE_WRAA;
/
show errors
CREATE OR REPLACE PACKAGE BODY ETH_COMMON_COMPLIANCE_WRAA IS
	FUNCTION PL_TO_SQL0(aPlsqlItem ETH_COMMON_SERVICES_PKG.IDVAL_REC)
 	RETURN ETH_COMMON_SERVICX111792X7X5 IS 
	aSqlItem ETH_COMMON_SERVICX111792X7X5; 
	BEGIN 
		-- initialize the object
		aSqlItem := ETH_COMMON_SERVICX111792X7X5(NULL, NULL);
		aSqlItem.ID := aPlsqlItem.ID;
		aSqlItem.VALUE := aPlsqlItem.VALUE;
		RETURN aSqlItem;
	END PL_TO_SQL0;
	FUNCTION SQL_TO_PL1(aSqlItem ETH_COMMON_SERVICX111792X7X5) 
	RETURN ETH_COMMON_SERVICES_PKG.IDVAL_REC IS 
	aPlsqlItem ETH_COMMON_SERVICES_PKG.IDVAL_REC; 
	BEGIN 
		aPlsqlItem.ID := aSqlItem.ID;
		aPlsqlItem.VALUE := aSqlItem.VALUE;
		RETURN aPlsqlItem;
	END SQL_TO_PL1;
	FUNCTION PL_TO_SQL1(aPlsqlItem ETH_COMMON_SERVICES_PKG.IDVAL_TAB)
 	RETURN ETH_COMMON_SERVICX111792X7X4 IS 
	aSqlItem ETH_COMMON_SERVICX111792X7X4; 
	BEGIN 
		-- initialize the table 
		aSqlItem := ETH_COMMON_SERVICX111792X7X4();
		IF aPlsqlItem IS NOT NULL THEN
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		IF aPlsqlItem.COUNT>0 THEN
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL0(aPlsqlItem(I));
		END LOOP; 
		END IF; 
		END IF; 
		RETURN aSqlItem;
	END PL_TO_SQL1;
	FUNCTION SQL_TO_PL0(aSqlItem ETH_COMMON_SERVICX111792X7X4) 
	RETURN ETH_COMMON_SERVICES_PKG.IDVAL_TAB IS 
	aPlsqlItem ETH_COMMON_SERVICES_PKG.IDVAL_TAB; 
	BEGIN 
		IF aSqlItem.COUNT>0 THEN
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL1(aSqlItem(I));
		END LOOP; 
		END IF;
		RETURN aPlsqlItem;
	END SQL_TO_PL0;

   PROCEDURE eth_common_services_pkg$eth_c (P_CALLER_NAME VARCHAR2,
	P_SOA_INSTANCE_ID VARCHAR2,
	P_TXN_RECORD_ID NUMBER,
	P_IDVAL_TAB ETH_CUSTOM_SCHEMA.ETH_COMMON_SERVICX111792X7X4,
	P_RESPONSECODE OUT NUMBER,
	P_ERRORCODENUMBER OUT VARCHAR2,
	P_ERRORDESCRIPTION OUT VARCHAR2
	) IS
 P_IDVAL_TAB_ ETH_CUSTOM_SCHEMA.ETH_COMMON_SERVICES_PKG.IDVAL_TAB;
   BEGIN
 P_IDVAL_TAB_ := ETH_COMMON_COMPLIANCE_WRAA.SQL_TO_PL0(P_IDVAL_TAB);
      ETH_CUSTOM_SCHEMA.ETH_COMMON_SERVICES_PKG.ETH_COMPLIANCE_DATA_PRC(P_CALLER_NAME,
	P_SOA_INSTANCE_ID,
	P_TXN_RECORD_ID,
	P_IDVAL_TAB_,
	P_RESPONSECODE,
	P_ERRORCODENUMBER,
	P_ERRORDESCRIPTION
	);
   END eth_common_services_pkg$eth_c;

END ETH_COMMON_COMPLIANCE_WRAA;
/
show errors
exit
