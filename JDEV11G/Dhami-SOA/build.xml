<?xml version="1.0" encoding="windows-1252" ?>
<!--Ant buildfile generated by Oracle JDeveloper-->
<!--Generated Jun 10, 2008 2:30:23 PM-->
<project name="ABCSGen" default="help" basedir=".">
  <property file="build.properties"/>

<taskdef resource="net/sf/antcontrib/antcontrib.properties">
  <classpath>
    <pathelement location="${ABCSGen.binarydir}/ant-contrib-1.0b2.jar"/>
  </classpath>
</taskdef>
<taskdef name="freemarker" classname="oracle.apps.aia.abcsgen.freemarker.FreemarkerAntImpl">
  <classpath>
    <pathelement location="${ABCSGen.binarydir}/abcsgen010.jar"/>
	<pathelement location="${ABCSGen.binarydir}/freemarker.jar"/>
  </classpath>
  </taskdef>
  <taskdef name="evaluateFTL" classname="oracle.apps.aia.abcsgen.freemarker.EvaluateFTLTask">
    <classpath>
	<pathelement location="${ABCSGen.binarydir}/abcsgen010.jar"/>
    <pathelement location="${ABCSGen.binarydir}/freemarker.jar"/>
  </classpath>
</taskdef>

<target name="help" >
<echo message="Please run 'ant genComposite'"/></target>

<target name="genComposite" description="sets paths for provider BPEL" >
  <xmlproperty file="${ABCSConfig.inputDir}${file.separator}${ABCSConfig.inputXML}"/> 
  <if><equals arg1="${AIACodeGenerator.ABCSConfig.ABCSType}" arg2="Requestor"/><then>
	<echo message="Building Requestor ABCS"/>
	<property name="ABCSConfig.DirectoryPath" value="ABCS/Requestor/Composite/" />
	<property name="ABCSConfig.ConfigureType" value="ReqBPEL" />
	 <antcall target="auto" /></then>
  </if>
  <if><equals arg1="${AIACodeGenerator.ABCSConfig.ABCSType}" arg2="Provider"/><then>
	<echo message="Building Provider ABCS"/>
  <property name="ABCSConfig.DirectoryPath" value="ABCS/Provider/Composite/" />
	<property name="ABCSConfig.ConfigureType" value="ProvBPEL" />
	 <antcall target="auto" /></then>
  </if>
</target>

 <target name="auto" description="auto decide">
 <if><not><isset property="ABCSConfig.DirectoryPath" /></not><then>
	<echo message="You must choose a type of project to build."/>
	<antcall target="help"/>
	<fail />
  </then></if>
  <echo message="To prevent prompts, run ant -DABCSConfig.inputXML=xml_path -Doutput.dir=build_path" />
  <if><not><isset property="output.dir"/></not><then>
    <input
    message="Please enter output directory (relative to the current path).  Or accept the default ${output.dir.deFaultMessage}"
    addproperty="output.dir"
    defaultvalue="${output.dir.deFaultMessage}"
  />
  <input
    message="Do you want to clear this directory ${output.dir}?"
	validargs="y,n"
    addproperty="do.delete"
  /></then><else><property name="do.delete" value="y" /></else></if>
  <if><equals arg1="y" arg2="${do.delete}"/><then>
  <mkdir dir="${output.dir}" />
    <!--zip destfile="${output.dir}/../old_build.zip"
       basedir="${output.dir}"
       update="true"
	   whenempty="skip"
  /-->
   <!-- <delete includeemptydirs="true" quiet="true">
    <fileset dir="${output.dir}" includes="**/*" excludes="build.xml,build.properties"/>
  </delete> 
  -->
</then>
  </if>
  <if><equals arg1="${ABCSConfig.ConfigureType}" arg2="ProvBPEL"/><then>
  	<evaluateFTL ftl="${doc['AIACodeGenerator/ABCSConfig/Verb']}${doc['AIACodeGenerator/ABCSConfig/ABCSInterface/ServiceObjectName']}${doc['AIACodeGenerator/ABCSConfig/ParticipatingAppShortName']}[#if doc['AIACodeGenerator/ABCSConfig/Industry']?size&lt;1 || doc['AIACodeGenerator/ABCSConfig/Industry']?matches('Core') || doc['AIACodeGenerator/ABCSConfig/Industry']?matches('core')][#else]${doc['AIACodeGenerator/ABCSConfig/Industry']}[/#if]ProvABCSImpl" assignment="ABCSConfig.dirName" /></then>
  <elseif><equals arg1="${ABCSConfig.ConfigureType}" arg2="ReqBPEL"/><then>
	<evaluateFTL ftl="${doc['AIACodeGenerator/ABCSConfig/Verb']}${doc['AIACodeGenerator/ABCSConfig/ABCSInterface/ServiceObjectName']}${doc['AIACodeGenerator/ABCSConfig/ParticipatingAppShortName']}[#if doc['AIACodeGenerator/ABCSConfig/Industry']?size&lt;1 || doc['AIACodeGenerator/ABCSConfig/Industry']?matches('Core') || doc['AIACodeGenerator/ABCSConfig/Industry']?matches('core')][#else]${doc['AIACodeGenerator/ABCSConfig/Industry']}[/#if]ReqABCSImpl" assignment="ABCSConfig.dirName" /></then></elseif>
  <else><property name="ABCSConfig.dirName" value="ABCSGeneratedProject" /></else></if>
  <if><isset property="ABCSConfig.inputXML" /><then>
	<xmlproperty file="${ABCSConfig.inputDir}${file.separator}${ABCSConfig.inputXML}"/> </then>
	<else><echo message="Must have defined an inputXML file to load as property ABCSConfig.inputXML, will do entire project"/><antcall target="all"/></else></if>
  <if><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/><then>
	<antcall target="project"/></then>
   </if>
   <if><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateCompositeFileIndicator}" arg2="true"/><then>
	<antcall target="composite"/></then>
   </if>
   <if><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateComponentFileIndicator}" arg2="true"/><then>
	<antcall target="component"/></then>
   </if>
    <if><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateWSDLFileIndicator}" arg2="true"/><then>
	<antcall target="wsdl"/></then>
  </if>
    <if><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateBPELFileIndicator}" arg2="true"/><then>
	<antcall target="bpel"/><antcall target="correlationset_WSDL"/></then>
  </if>
   <if><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateMappingXSLFileIndicator}" arg2="true"/><then>
	<antcall target="xsl"/></then>
  </if>
  <if><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateExtensionWSDLFileIndicator}" arg2="true"/><then>
	<antcall target="extwsdl"/></then>
  </if>
  <if><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateFaultPolicyFileIndicator}" arg2="true"/><then> 
        <antcall target="faultPolicy"/></then> 
  </if>
  <if><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateConfigFileIndicator}" arg2="true"/><then> 
        <antcall target="configFile"/></then> 
  </if>
  <antcall target="refwsdl"/>
	<if><and><not><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></not>
	<not><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateWSDLFileIndicator}" arg2="true"/></not>
	<not><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateBPELFileIndicator}" arg2="true"/></not>
	</and>
	<then><echo message="I don't think you have specified params in xpath('AIACodeGenerator/GenerateOutputFiles'), so I will make entire project."/><antcall target="all"/></then></if>	
  </target>

<target name="wsdl" description="make the WSDL" if="ABCSConfig.DirectoryPath">
<if><not><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></not><then>
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*ImplWSDL*.template"  excludes="*bak,*bac"/></then>
<elseif><and><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateBPELFileIndicator}" arg2="true"/><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></and><then>
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*ImplWSDL*.template" excludes="*bak,*bac"/></then></elseif></if>
</target>

<target name="bpel" description="make the BPEL" if="ABCSConfig.DirectoryPath">
<if><not><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></not><then>
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*BPEL*.template"  excludes="*bak,*bac"/></then>
<elseif><and><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateBPELFileIndicator}" arg2="true"/><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></and><then>
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*BPEL*.template,${ABCSConfig.DirectoryPath}*bpel.xml*.template"  excludes="*bak,*bac"/>
<freemarker outDir="${ABCSConfig.dirName}/xsl" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*AddTargetSystemID.template"  excludes="*bak,*bac"/></then></elseif></if>
</target>

<target name="refwsdl" description="make the reference WSDL(s)" if="ABCSConfig.DirectoryPath">
<if><not><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></not><then>
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*RefWSDL*.template"  excludes="*bak,*bac"/></then>
<elseif><and><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateBPELFileIndicator}" arg2="true"/><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></and><then>
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*RefWSDL*.template"  excludes="*bak,*bac"/></then></elseif></if>
</target>

<target name="extwsdl" description="make the Extension WSDL(s)" if="ABCSConfig.DirectoryPath">
<if><not><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></not><then>
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*ExtensionWSDL*.template"  excludes="*bak,*bac"/></then>
<elseif><and><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateBPELFileIndicator}" arg2="true"/><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></and><then>
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*ExtensionWSDL*.template"  excludes="*bak,*bac"/></then></elseif></if>
</target>

<target name="xsl" description="make the reference xsl(s)" if="ABCSConfig.DirectoryPath">
<if><not><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></not><then>
<freemarker outDir="${ABCSConfig.dirName}/xsl" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}Xform*.template"  excludes="*bak,*bac"/></then>
<elseif><and><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateBPELFileIndicator}" arg2="true"/><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateJdeveloperProjectFileIndicator}" arg2="true"/></and><then>
<freemarker outDir="${ABCSConfig.dirName}/xsl" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}Xform*.template"  excludes="*bak,*bac"/></then></elseif></if>
</target>

<target name="project" description="make a JDeveloper Project" if="ABCSConfig.DirectoryPath">
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*jpr.template" />
<antcall target="ancillary" />
</target>
<target name="composite" description="make a composite xml file" if="ABCSConfig.DirectoryPath">
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*composite.xml.template" />
<antcall target="ancillary" />
</target>
<target name="component" description="make a component type xml file" if="ABCSConfig.DirectoryPath">
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*componenttype.xml.template" />
<antcall target="ancillary" />
</target>
<target name="correlationset_WSDL" description="generate Correlation Set Properties file"> 
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*CorrelationSet_PropertiesWSDL.template"  excludes="*bak,*bac"/>
</target> 

<target name="faultPolicy" description="generate Fault Policy file"> 
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*fault*.xml.template"  excludes="*bak,*bac"/>
</target> 
<target name="configFile" description="generate Configuration file entry"> 
<freemarker outDir="${ABCSConfig.dirName}" tempDir="${ABCSConfig.tempDir}" includes="${ABCSConfig.DirectoryPath}*ConfigFile.template"  excludes="*bak,*bac"/>
</target> 
<target name="ancillary" description="copy ancillary files to project" if="ABCSConfig.DirectoryPath">
<if><equals arg1="${AIACodeGenerator.GenerateOutputFiles.GenerateBPELFileIndicator}" arg2="true"/><then>
<copy todir="${currentDir}">
<fileset dir="${ABCSConfig.tempDir}/${ABCSConfig.DirectoryPath}static" excludes="*BPEL*,*WSDL*,*bpel*,*wsdl*,*bak,*bac,*jpr,*Fault.xsl" /></copy>
<copy todir="${currentDir}/xsl">
<fileset dir="${ABCSConfig.tempDir}/${ABCSConfig.DirectoryPath}static" includes="*Fault.xsl" excludes="*BPEL*,*WSDL*,*bpel*,*wsdl*,*bak,*bac,*jpr" /></copy>
</then>
<elseif><equals arg1="${ABCSConfig.Build.ESB}" arg2="true"/><then>
<copy todir="${currentDir}">
<fileset dir="${ABCSConfig.tempDir}/${ABCSConfig.DirectoryPath}static" excludes="*BPEL*,*WSDL*,*bpel*,*wsdl*,*bak,*bac,*jpr" /></copy></then></elseif>
<elseif><equals arg1="${ABCSConfig.Build.SomeOtherTechnology}" arg2="true"/><then>
<copy todir="${currentDir}">
<fileset dir="${ABCSConfig.tempDir}/${ABCSConfig.DirectoryPath}static" excludes="*BPEL*,*WSDL*,*bpel*,*wsdl*,*bak,*bac,*jpr" /></copy></then></elseif>
</if>
<mkdir dir="${currentDir}/xsd"/>
</target>

<target name="all" description="build the entire project" if="ABCSConfig.DirectoryPath">
	<antcall target="project"/>
	<antcall target="composite"/>
	<antcall target="component"/>
	<antcall target="wsdl"/>
	<antcall target="bpel"/>
	<antcall target="xsl" />
	<antcall target="extwsdl" />
	<antcall target="refwsdl"/>
</target>

</project>

