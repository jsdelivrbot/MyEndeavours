-- Declare the SQL type for the PL/SQL type ROWTYPE_PL2
CREATE OR REPLACE TYPE ETH_COMM_SRVC_LOOX143989X1X7 AS OBJECT (
      LOOKUP_RECORD_ID NUMBER(10),
      TRANSACTION_SUBTYPE VARCHAR2(8),
      COMMON_SERVICE_NAME VARCHAR2(150),
      TRADING_PARTNER_ID VARCHAR2(30),
      CALLING_SEQUENCE NUMBER,
      COMMON_SERVICE_URL VARCHAR2(500),
      PAYLOAD_REQUIRED VARCHAR2(5),
      COM_SRVC_IP_PARAMS VARCHAR2(50),
      STOPONFAILURE1 VARCHAR2(10),
      STOPONFAILURE2 VARCHAR2(10),
      STOPONFAILURE3 VARCHAR2(10),
      STOPONFAILURE4 VARCHAR2(10),
      STOPONFAILURE5 VARCHAR2(10),
      CREATED_DT DATE,
      LAST_UPDATED_DT DATE,
      CREATED_BY VARCHAR2(100),
      UPDATED_BY VARCHAR2(100),
      EFFECTIVEDATE_FROM DATE,
      EFFECTIVEDATE_TO DATE
);
/
show errors
CREATE OR REPLACE TYPE ETH_COMM_SRVC_LOOX143989X1X6 AS TABLE OF ETH_COMM_SRVC_LOOX143989X1X7; 
/
show errors
-- Declare package containing conversion functions between SQL and PL/SQL types
CREATE OR REPLACE PACKAGE BPEL_DBTEST AS
	-- Redefine a PL/SQL RECORD type originally defined via CURSOR%ROWTYPE
	TYPE ROWTYPE_PL2 IS RECORD (
		LOOKUP_RECORD_ID NUMBER(10),
		TRANSACTION_SUBTYPE VARCHAR2(8),
		COMMON_SERVICE_NAME VARCHAR2(150),
		TRADING_PARTNER_ID VARCHAR2(30),
		CALLING_SEQUENCE NUMBER,
		COMMON_SERVICE_URL VARCHAR2(500),
		PAYLOAD_REQUIRED VARCHAR2(5),
		COM_SRVC_IP_PARAMS VARCHAR2(50),
		STOPONFAILURE1 VARCHAR2(10),
		STOPONFAILURE2 VARCHAR2(10),
		STOPONFAILURE3 VARCHAR2(10),
		STOPONFAILURE4 VARCHAR2(10),
		STOPONFAILURE5 VARCHAR2(10),
		CREATED_DT DATE,
		LAST_UPDATED_DT DATE,
		CREATED_BY VARCHAR2(100),
		UPDATED_BY VARCHAR2(100),
		EFFECTIVEDATE_FROM DATE,
		EFFECTIVEDATE_TO DATE);
	-- Declare the conversion functions the PL/SQL type ROWTYPE_PL2
	FUNCTION PL_TO_SQL1(aPlsqlItem ROWTYPE_PL2)
 	RETURN ETH_COMM_SRVC_LOOX143989X1X7;
	FUNCTION SQL_TO_PL1(aSqlItem ETH_COMM_SRVC_LOOX143989X1X7)
	RETURN ROWTYPE_PL2;
	-- Declare the conversion functions the PL/SQL type ETH_COMM_SRVC_LOOKUP_PKG.T_LIST
	FUNCTION PL_TO_SQL0(aPlsqlItem ETH_COMM_SRVC_LOOKUP_PKG.T_LIST)
 	RETURN ETH_COMM_SRVC_LOOX143989X1X6;
	FUNCTION SQL_TO_PL0(aSqlItem ETH_COMM_SRVC_LOOX143989X1X6)
	RETURN ETH_COMM_SRVC_LOOKUP_PKG.T_LIST;
   PROCEDURE eth_comm_srvc_lookup_pkg$eth_ (P_CALLER_NAME VARCHAR2,
	P_SENDER_ID VARCHAR2,
	P_TRXN_TYPE VARCHAR2,
	P_TRXN_SUBTYPE VARCHAR2,
	P_SOA_INSTANCE_ID VARCHAR2,
	P_OUT OUT ETH_CUSTOM_SCHEMA.ETH_COMM_SRVC_LOOX143989X1X6,
	P_RESPONSECODE OUT NUMBER,
	P_ERRORCODENUMBER OUT VARCHAR2,
	P_ERRORDESCRIPTION OUT VARCHAR2
	);
END BPEL_DBTEST;
/
show errors
CREATE OR REPLACE PACKAGE BODY BPEL_DBTEST IS
	FUNCTION PL_TO_SQL1(aPlsqlItem ROWTYPE_PL2)
 	RETURN ETH_COMM_SRVC_LOOX143989X1X7 IS 
	aSqlItem ETH_COMM_SRVC_LOOX143989X1X7; 
	BEGIN 
		-- initialize the object
		aSqlItem := ETH_COMM_SRVC_LOOX143989X1X7(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
		aSqlItem.LOOKUP_RECORD_ID := aPlsqlItem.LOOKUP_RECORD_ID;
		aSqlItem.TRANSACTION_SUBTYPE := aPlsqlItem.TRANSACTION_SUBTYPE;
		aSqlItem.COMMON_SERVICE_NAME := aPlsqlItem.COMMON_SERVICE_NAME;
		aSqlItem.TRADING_PARTNER_ID := aPlsqlItem.TRADING_PARTNER_ID;
		aSqlItem.CALLING_SEQUENCE := aPlsqlItem.CALLING_SEQUENCE;
		aSqlItem.COMMON_SERVICE_URL := aPlsqlItem.COMMON_SERVICE_URL;
		aSqlItem.PAYLOAD_REQUIRED := aPlsqlItem.PAYLOAD_REQUIRED;
		aSqlItem.COM_SRVC_IP_PARAMS := aPlsqlItem.COM_SRVC_IP_PARAMS;
		aSqlItem.STOPONFAILURE1 := aPlsqlItem.STOPONFAILURE1;
		aSqlItem.STOPONFAILURE2 := aPlsqlItem.STOPONFAILURE2;
		aSqlItem.STOPONFAILURE3 := aPlsqlItem.STOPONFAILURE3;
		aSqlItem.STOPONFAILURE4 := aPlsqlItem.STOPONFAILURE4;
		aSqlItem.STOPONFAILURE5 := aPlsqlItem.STOPONFAILURE5;
		aSqlItem.CREATED_DT := aPlsqlItem.CREATED_DT;
		aSqlItem.LAST_UPDATED_DT := aPlsqlItem.LAST_UPDATED_DT;
		aSqlItem.CREATED_BY := aPlsqlItem.CREATED_BY;
		aSqlItem.UPDATED_BY := aPlsqlItem.UPDATED_BY;
		aSqlItem.EFFECTIVEDATE_FROM := aPlsqlItem.EFFECTIVEDATE_FROM;
		aSqlItem.EFFECTIVEDATE_TO := aPlsqlItem.EFFECTIVEDATE_TO;
		RETURN aSqlItem;
	END PL_TO_SQL1;
	FUNCTION SQL_TO_PL1(aSqlItem ETH_COMM_SRVC_LOOX143989X1X7) 
	RETURN ROWTYPE_PL2 IS 
	aPlsqlItem ROWTYPE_PL2; 
	BEGIN 
		aPlsqlItem.LOOKUP_RECORD_ID := aSqlItem.LOOKUP_RECORD_ID;
		aPlsqlItem.TRANSACTION_SUBTYPE := aSqlItem.TRANSACTION_SUBTYPE;
		aPlsqlItem.COMMON_SERVICE_NAME := aSqlItem.COMMON_SERVICE_NAME;
		aPlsqlItem.TRADING_PARTNER_ID := aSqlItem.TRADING_PARTNER_ID;
		aPlsqlItem.CALLING_SEQUENCE := aSqlItem.CALLING_SEQUENCE;
		aPlsqlItem.COMMON_SERVICE_URL := aSqlItem.COMMON_SERVICE_URL;
		aPlsqlItem.PAYLOAD_REQUIRED := aSqlItem.PAYLOAD_REQUIRED;
		aPlsqlItem.COM_SRVC_IP_PARAMS := aSqlItem.COM_SRVC_IP_PARAMS;
		aPlsqlItem.STOPONFAILURE1 := aSqlItem.STOPONFAILURE1;
		aPlsqlItem.STOPONFAILURE2 := aSqlItem.STOPONFAILURE2;
		aPlsqlItem.STOPONFAILURE3 := aSqlItem.STOPONFAILURE3;
		aPlsqlItem.STOPONFAILURE4 := aSqlItem.STOPONFAILURE4;
		aPlsqlItem.STOPONFAILURE5 := aSqlItem.STOPONFAILURE5;
		aPlsqlItem.CREATED_DT := aSqlItem.CREATED_DT;
		aPlsqlItem.LAST_UPDATED_DT := aSqlItem.LAST_UPDATED_DT;
		aPlsqlItem.CREATED_BY := aSqlItem.CREATED_BY;
		aPlsqlItem.UPDATED_BY := aSqlItem.UPDATED_BY;
		aPlsqlItem.EFFECTIVEDATE_FROM := aSqlItem.EFFECTIVEDATE_FROM;
		aPlsqlItem.EFFECTIVEDATE_TO := aSqlItem.EFFECTIVEDATE_TO;
		RETURN aPlsqlItem;
	END SQL_TO_PL1;
	FUNCTION PL_TO_SQL0(aPlsqlItem ETH_COMM_SRVC_LOOKUP_PKG.T_LIST)
 	RETURN ETH_COMM_SRVC_LOOX143989X1X6 IS 
	aSqlItem ETH_COMM_SRVC_LOOX143989X1X6; 
	BEGIN 
		-- initialize the table 
		aSqlItem := ETH_COMM_SRVC_LOOX143989X1X6();
		IF aPlsqlItem IS NOT NULL THEN
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		IF aPlsqlItem.COUNT>0 THEN
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL1(aPlsqlItem(I));
		END LOOP; 
		END IF; 
		END IF; 
		RETURN aSqlItem;
	END PL_TO_SQL0;
	FUNCTION SQL_TO_PL0(aSqlItem ETH_COMM_SRVC_LOOX143989X1X6) 
	RETURN ETH_COMM_SRVC_LOOKUP_PKG.T_LIST IS 
	aPlsqlItem ETH_COMM_SRVC_LOOKUP_PKG.T_LIST; 
	BEGIN 
		aPlsqlItem := ETH_COMM_SRVC_LOOKUP_PKG.T_LIST();
		aPlsqlItem.EXTEND(aSqlItem.COUNT);
		IF aSqlItem.COUNT>0 THEN
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL1(aSqlItem(I));
		END LOOP; 
		END IF;
		RETURN aPlsqlItem;
	END SQL_TO_PL0;

   PROCEDURE eth_comm_srvc_lookup_pkg$eth_ (P_CALLER_NAME VARCHAR2,
	P_SENDER_ID VARCHAR2,
	P_TRXN_TYPE VARCHAR2,
	P_TRXN_SUBTYPE VARCHAR2,
	P_SOA_INSTANCE_ID VARCHAR2,
	P_OUT OUT ETH_CUSTOM_SCHEMA.ETH_COMM_SRVC_LOOX143989X1X6,
	P_RESPONSECODE OUT NUMBER,
	P_ERRORCODENUMBER OUT VARCHAR2,
	P_ERRORDESCRIPTION OUT VARCHAR2
	) IS
 P_OUT_ ETH_CUSTOM_SCHEMA.ETH_COMM_SRVC_LOOKUP_PKG.T_LIST;
   BEGIN
      ETH_CUSTOM_SCHEMA.ETH_COMM_SRVC_LOOKUP_PKG.ETH_COMM_SRVC_LOOKUP_PRC(P_CALLER_NAME,
	P_SENDER_ID,
	P_TRXN_TYPE,
	P_TRXN_SUBTYPE,
	P_SOA_INSTANCE_ID,
	P_OUT_,
	P_RESPONSECODE,
	P_ERRORCODENUMBER,
	P_ERRORDESCRIPTION
	);
 P_OUT := BPEL_DBTEST.PL_TO_SQL0(P_OUT_);
   END eth_comm_srvc_lookup_pkg$eth_;

END BPEL_DBTEST;
/
show errors
exit
