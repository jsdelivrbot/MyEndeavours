// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package com.tempproxy.proxy.runtime;

import oracle.j2ee.ws.common.streaming.*;
import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.soap.streaming.*;
import oracle.j2ee.ws.common.soap.message.*;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.soap.SOAPEnvelopeConstants;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import oracle.j2ee.ws.common.util.exception.JAXRPCExceptionBase;
import oracle.j2ee.ws.common.util.SoapWithAttachmentsUtil;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import oracle.j2ee.ws.client.*;
import oracle.j2ee.ws.client.http.*;
import oracle.webservices.transport.*;
import oracle.webservices.*;
import oracle.webservices.attachments.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class UserWebServicePortBinding_Stub
    extends oracle.j2ee.ws.client.StubBase
    implements com.tempproxy.proxy.UserWebServicePortType {
    
    
    /*
     *  public constructor
     */
    public UserWebServicePortBinding_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://compliance-stg.emerson.com:12001/ClosetMaid/Server/vdst/core/UserWebService");
        setSoapVersion(SOAPVersion.SOAP_11);
        setServiceName( new QName("http://service.emerson.com/vdst/tool/","UserWebService"));
        setPortName( new QName("http://service.emerson.com/vdst/tool/","UserWebServicePort"));
        setupConfig("com/tempproxy/proxy/runtime/UserWebServicePortBinding_Stub.xml");
    }
    
    /*
     *  implementation of login
     */
    public java.lang.String login(java.lang.String loginName, byte[] password)
        throws com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.FaultDetailType, com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.SOAPException, java.rmi.RemoteException {
        
        StreamingSenderState _state = null;
        try {
            
            _state = _start(_handlerChain);
            if (_getProperty(ClientConstants.DIME_ENCODE_MESSAGES_WITH_ATTACHMENTS) != null) {
                _state.getMessageContext().getMessage().setProperty("DimeEncode",_getProperty(ClientConstants.DIME_ENCODE_MESSAGES_WITH_ATTACHMENTS));
            }
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(login_OPCODE);
            _state.getMessageContext().setProperty("oracle.j2ee.ws.mgmt.interceptor.operation-qname",new QName("","login"));
            
            com.tempproxy.proxy.LoginRequestType _myLoginRequestType = new com.tempproxy.proxy.LoginRequestType();
            _myLoginRequestType.setLoginName(loginName);
            _myLoginRequestType.setPassword(password);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_login_login_QNAME);
            _bodyBlock.setValue(_myLoginRequestType);
            _bodyBlock.setSerializer(myns1_LoginRequestType__LoginRequestType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty("http.soap.action", "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.tempproxy.proxy.LoginResponseType _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.tempproxy.proxy.LoginResponseType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.tempproxy.proxy.LoginResponseType)_responseObj;
            }
            
            return _result.getSessionID();
            
        } catch (com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.FaultDetailType e ) {
            throw e;
        } catch (com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.SOAPException e ) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof oracle.j2ee.ws.common.util.HeaderFaultException) {
                oracle.j2ee.ws.common.util.HeaderFaultException hfe = (oracle.j2ee.ws.common.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (ClientTransportException e) {
            throw new RemoteException( "", e );
        } catch (JAXRPCException e) {
            throw e;
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of findUser
     */
    public com.tempproxy.proxy.UserType findUser(java.lang.String sessionID, java.lang.String loginName)
        throws com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.FaultDetailType, com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.SOAPException, java.rmi.RemoteException {
        
        StreamingSenderState _state = null;
        try {
            
            _state = _start(_handlerChain);
            if (_getProperty(ClientConstants.DIME_ENCODE_MESSAGES_WITH_ATTACHMENTS) != null) {
                _state.getMessageContext().getMessage().setProperty("DimeEncode",_getProperty(ClientConstants.DIME_ENCODE_MESSAGES_WITH_ATTACHMENTS));
            }
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(findUser_OPCODE);
            _state.getMessageContext().setProperty("oracle.j2ee.ws.mgmt.interceptor.operation-qname",new QName("","findUser"));
            
            com.tempproxy.proxy.FindUserRequestType _myFindUserRequestType = new com.tempproxy.proxy.FindUserRequestType();
            _myFindUserRequestType.setSessionID(sessionID);
            _myFindUserRequestType.setLoginName(loginName);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_findUser_findUser_QNAME);
            _bodyBlock.setValue(_myFindUserRequestType);
            _bodyBlock.setSerializer(myns1_FindUserRequestType__FindUserRequestType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty("http.soap.action", "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.tempproxy.proxy.FindUserResponseType _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.tempproxy.proxy.FindUserResponseType)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.tempproxy.proxy.FindUserResponseType)_responseObj;
            }
            
            return _result.getUserType();
            
        } catch (com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.FaultDetailType e ) {
            throw e;
        } catch (com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.SOAPException e ) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof oracle.j2ee.ws.common.util.HeaderFaultException) {
                oracle.j2ee.ws.common.util.HeaderFaultException hfe = (oracle.j2ee.ws.common.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (ClientTransportException e) {
            throw new RemoteException( "", e );
        } catch (JAXRPCException e) {
            throw e;
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of logout
     */
    public void logout(java.lang.String sessionID)
        throws com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.SOAPException, com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.FaultDetailType, java.rmi.RemoteException {
        
        StreamingSenderState _state = null;
        try {
            
            _state = _start(_handlerChain);
            if (_getProperty(ClientConstants.DIME_ENCODE_MESSAGES_WITH_ATTACHMENTS) != null) {
                _state.getMessageContext().getMessage().setProperty("DimeEncode",_getProperty(ClientConstants.DIME_ENCODE_MESSAGES_WITH_ATTACHMENTS));
            }
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(logout_OPCODE);
            _state.getMessageContext().setProperty("oracle.j2ee.ws.mgmt.interceptor.operation-qname",new QName("","logout"));
            
            com.tempproxy.proxy.LogoutRequestType _myLogoutRequestType = new com.tempproxy.proxy.LogoutRequestType();
            _myLogoutRequestType.setSessionID(sessionID);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_logout_logout_QNAME);
            _bodyBlock.setValue(_myLogoutRequestType);
            _bodyBlock.setSerializer(myns1_LogoutRequestType__LogoutRequestType_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty("http.soap.action", "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.FaultDetailType e ) {
            throw e;
        } catch (com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.SOAPException e ) {
            throw e;
        } catch (RemoteException e) {
            if (e.detail instanceof oracle.j2ee.ws.common.util.HeaderFaultException) {
                oracle.j2ee.ws.common.util.HeaderFaultException hfe = (oracle.j2ee.ws.common.util.HeaderFaultException) e.detail;
                SOAPHeaderBlockInfo headerBlock = (SOAPHeaderBlockInfo) hfe.getObject();
                Object obj = headerBlock.getValue();
            }
            // let this one through unchanged
            throw e;
        } catch (ClientTransportException e) {
            throw new RemoteException( "", e );
        } catch (JAXRPCException e) {
            throw e;
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case login_OPCODE:
                _deserialize_login(bodyReader, deserializationContext, state);
                break;
            case findUser_OPCODE:
                _deserialize_findUser(bodyReader, deserializationContext, state);
                break;
            case logout_OPCODE:
                _deserialize_logout(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the login operation.
     */
    private void _deserialize_login(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        try {
            Object myLoginResponseTypeObj =
                myns1_LoginResponseType__LoginResponseType_LiteralSerializer.deserialize(ns1_login_LoginResponse_QNAME,
                    bodyReader, deserializationContext);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_login_LoginResponse_QNAME);
            bodyBlock.setValue(myLoginResponseTypeObj);
            state.getResponse().setBody(bodyBlock);
        } catch (DeserializationException e) {
            throw e;
        }
    }
    
    /*
     * This method deserializes the body of the findUser operation.
     */
    private void _deserialize_findUser(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        try {
            Object myFindUserResponseTypeObj =
                myns1_FindUserResponseType__FindUserResponseType_LiteralSerializer.deserialize(ns1_findUser_FindUserResponse_QNAME,
                    bodyReader, deserializationContext);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_findUser_FindUserResponse_QNAME);
            bodyBlock.setValue(myFindUserResponseTypeObj);
            state.getResponse().setBody(bodyBlock);
        } catch (DeserializationException e) {
            throw e;
        }
    }
    
    /*
     * This method deserializes the body of the logout operation.
     */
    private void _deserialize_logout(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        try {
            Object myLogoutResponseObj =
                myns1_LogoutResponse__LogoutResponse_LiteralSerializer.deserialize(ns1_logout_LogoutResponse_QNAME,
                    bodyReader, deserializationContext);
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_logout_LogoutResponse_QNAME);
            bodyBlock.setValue(myLogoutResponseObj);
            state.getResponse().setBody(bodyBlock);
        } catch (DeserializationException e) {
            throw e;
        }
    }
    
    /*
     *  this method deserializes fault responses
     */
    protected Object _readBodyFaultElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object faultInfo = null;
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case login_OPCODE:
                faultInfo = myUserWebServicePortType_login_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case findUser_OPCODE:
                faultInfo = myUserWebServicePortType_findUser_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            case logout_OPCODE:
                faultInfo = myUserWebServicePortType_logout_Fault_SOAPSerializer.deserialize(null, bodyReader, deserializationContext);
                break;
            default:
                return super._readBodyFaultElement(bodyReader, deserializationContext, state);
        }
        return faultInfo;
    }
    
    
    
    public String _getEncodingStyle() {
        return SOAPEncodingConstants.getSOAPEncodingConstants(soapVersion).getURIEncoding();
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    public ClientTransport getClientTransport() {
        return super._getTransport();
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    /*
     * This method handles the case of an empty SOAP body.
     */
    protected void _handleEmptyBody(XMLReader reader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        myns1_FindUserResponseType__FindUserResponseType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.tempproxy.proxy.FindUserResponseType.class, ns1_FindUserResponseType_TYPE_QNAME);
        myns1_FindUserRequestType__FindUserRequestType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.tempproxy.proxy.FindUserRequestType.class, ns1_FindUserRequestType_TYPE_QNAME);
        myns1_LogoutRequestType__LogoutRequestType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.tempproxy.proxy.LogoutRequestType.class, ns1_LogoutRequestType_TYPE_QNAME);
        myns1_LoginRequestType__LoginRequestType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.tempproxy.proxy.LoginRequestType.class, ns1_LoginRequestType_TYPE_QNAME);
        myns1_LogoutResponse__LogoutResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.tempproxy.proxy.LogoutResponse.class, ns1_LogoutResponse_TYPE_QNAME);
        myns1_LoginResponseType__LoginResponseType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.tempproxy.proxy.LoginResponseType.class, ns1_LoginResponseType_TYPE_QNAME);
        ((Initializable)myUserWebServicePortType_login_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myUserWebServicePortType_findUser_Fault_SOAPSerializer).initialize(registry);
        ((Initializable)myUserWebServicePortType_logout_Fault_SOAPSerializer).initialize(registry);
    }
    
    private static final QName _portName = new QName("http://service.emerson.com/vdst/tool/", "UserWebServicePort");
    private static final int login_OPCODE = 0;
    private static final int findUser_OPCODE = 1;
    private static final int logout_OPCODE = 2;
    private final CombinedSerializer myUserWebServicePortType_login_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new com.tempproxy.proxy.runtime.UserWebServicePortType_login_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE, SOAPVersion.SOAP_11), SOAPVersion.SOAP_11);
    private final CombinedSerializer myUserWebServicePortType_findUser_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new com.tempproxy.proxy.runtime.UserWebServicePortType_findUser_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE, SOAPVersion.SOAP_11), SOAPVersion.SOAP_11);
    private final CombinedSerializer myUserWebServicePortType_logout_Fault_SOAPSerializer = new ReferenceableSerializerImpl(DONT_SERIALIZE_AS_REF,
        new com.tempproxy.proxy.runtime.UserWebServicePortType_logout_Fault_SOAPSerializer(ENCODE_TYPE, NOT_NULLABLE, SOAPVersion.SOAP_11), SOAPVersion.SOAP_11);
    private static final QName ns1_login_login_QNAME = new QName("http://service.emerson.com/vdst/tool/", "login");
    private static final QName ns1_LoginRequestType_TYPE_QNAME = new QName("http://service.emerson.com/vdst/tool/", "LoginRequestType");
    private CombinedSerializer myns1_LoginRequestType__LoginRequestType_LiteralSerializer;
    private static final QName ns1_login_LoginResponse_QNAME = new QName("http://service.emerson.com/vdst/tool/", "LoginResponse");
    private static final QName ns1_LoginResponseType_TYPE_QNAME = new QName("http://service.emerson.com/vdst/tool/", "LoginResponseType");
    private CombinedSerializer myns1_LoginResponseType__LoginResponseType_LiteralSerializer;
    private static final QName ns1_findUser_findUser_QNAME = new QName("http://service.emerson.com/vdst/tool/", "findUser");
    private static final QName ns1_FindUserRequestType_TYPE_QNAME = new QName("http://service.emerson.com/vdst/tool/", "FindUserRequestType");
    private CombinedSerializer myns1_FindUserRequestType__FindUserRequestType_LiteralSerializer;
    private static final QName ns1_findUser_FindUserResponse_QNAME = new QName("http://service.emerson.com/vdst/tool/", "FindUserResponse");
    private static final QName ns1_FindUserResponseType_TYPE_QNAME = new QName("http://service.emerson.com/vdst/tool/", "FindUserResponseType");
    private CombinedSerializer myns1_FindUserResponseType__FindUserResponseType_LiteralSerializer;
    private static final QName ns1_logout_logout_QNAME = new QName("http://service.emerson.com/vdst/tool/", "logout");
    private static final QName ns1_LogoutRequestType_TYPE_QNAME = new QName("http://service.emerson.com/vdst/tool/", "LogoutRequestType");
    private CombinedSerializer myns1_LogoutRequestType__LogoutRequestType_LiteralSerializer;
    private static final QName ns1_logout_LogoutResponse_QNAME = new QName("http://service.emerson.com/vdst/tool/", "LogoutResponse");
    private static final QName ns1_LogoutResponse_TYPE_QNAME = new QName("http://service.emerson.com/vdst/tool/", "LogoutResponse");
    private CombinedSerializer myns1_LogoutResponse__LogoutResponse_LiteralSerializer;
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "http://service.emerson.com/vdst/tool/common",
                                            "ns1", "http://service.emerson.com/vdst/tool/"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
    
}
