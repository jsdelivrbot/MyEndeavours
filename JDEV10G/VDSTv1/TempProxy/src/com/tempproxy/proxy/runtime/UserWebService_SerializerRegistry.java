// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package com.tempproxy.proxy.runtime;

import oracle.j2ee.ws.client.BasicService;
import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.encoding.simpletype.*;
import oracle.j2ee.ws.common.encoding.soap.*;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.namespace.QName;

public class UserWebService_SerializerRegistry extends SerializerRegistryBase implements SerializerConstants {
    public UserWebService_SerializerRegistry() {
    }
    
    public TypeMappingRegistry getRegistry() {
        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping11 = registry.getTypeMapping(SOAPEncodingConstants.getSOAPEncodingConstants(SOAPVersion.SOAP_11).getURIEncoding());
        TypeMapping mapping = registry.getTypeMapping("");
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/common", "SOAPException");
            CombinedSerializer serializer = new com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.runtime.SOAPException_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.SOAPException.class, type, serializer);
        }
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/", "LogoutRequestType");
            CombinedSerializer serializer = new com.tempproxy.proxy.runtime.LogoutRequestType_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,com.tempproxy.proxy.LogoutRequestType.class, type, serializer);
        }
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/common", "VoidType");
            CombinedSerializer serializer = new com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.runtime.VoidType_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.VoidType.class, type, serializer);
        }
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/", "LoginResponseType");
            CombinedSerializer serializer = new com.tempproxy.proxy.runtime.LoginResponseType_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,com.tempproxy.proxy.LoginResponseType.class, type, serializer);
        }
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/common", "FaultDetailType");
            CombinedSerializer serializer = new com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.runtime.FaultDetailType_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,com.tempproxy.proxy.types.com.emerson.service.vdst.tool.common.FaultDetailType.class, type, serializer);
        }
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/", "LogoutResponse");
            CombinedSerializer serializer = new com.tempproxy.proxy.runtime.LogoutResponse_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,com.tempproxy.proxy.LogoutResponse.class, type, serializer);
        }
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/", "FindUserRequestType");
            CombinedSerializer serializer = new com.tempproxy.proxy.runtime.FindUserRequestType_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,com.tempproxy.proxy.FindUserRequestType.class, type, serializer);
        }
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/", "UserType");
            CombinedSerializer serializer = new com.tempproxy.proxy.runtime.UserType_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,com.tempproxy.proxy.UserType.class, type, serializer);
        }
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/", "FindUserResponseType");
            CombinedSerializer serializer = new com.tempproxy.proxy.runtime.FindUserResponseType_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,com.tempproxy.proxy.FindUserResponseType.class, type, serializer);
        }
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/", "UserRoleIDType");
            CombinedSerializer serializer = new LiteralSimpleTypeSerializer(type, 
                com.tempproxy.proxy.runtime.UserRoleIDType_Encoder.getInstance());
            registerSerializer(mapping,com.tempproxy.proxy.UserRoleIDType.class, type, serializer);
        }
        {
            QName type = new QName("http://service.emerson.com/vdst/tool/", "LoginRequestType");
            CombinedSerializer serializer = new com.tempproxy.proxy.runtime.LoginRequestType_LiteralSerializer(type, DONT_ENCODE_TYPE);
            registerSerializer(mapping,com.tempproxy.proxy.LoginRequestType.class, type, serializer);
        }
        com.tempproxy.proxy.runtime.UserWebService_SerializerRegistry12 internal12Registry = new com.tempproxy.proxy.runtime.UserWebService_SerializerRegistry12();
        return internal12Registry.getRegistry(registry);
    }
    
    private static void registerSerializer(TypeMapping mapping, Class javaType, QName xmlType,
        Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
            new SingletonDeserializerFactory((Deserializer)ser));
    }
    
}
