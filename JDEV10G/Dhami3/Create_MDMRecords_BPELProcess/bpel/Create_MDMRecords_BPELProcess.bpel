<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Tue Jun 10 11:53:18 IST 2008
  Author:  hemant
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="Create_MDMRecords_BPELProcess"
         targetNamespace="http://www.gssamerica.com/mdm/Create_MDMRecords_BPELProcess"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         queryLanguage="http://www.w3.org/TR/1999/REC-xpath-19991116"
         expressionLanguage="http://www.w3.org/TR/1999/REC-xpath-19991116"
         abstractProcess="no" enableInstanceCompensation="no"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ns4="http://xmlns.oracle.com/pcbpel/adapter/jms/LogService/"
         xmlns:ns7="http://www.gssamerica.com/mdm/services/MDMCreateRecords/"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns12="http://schemas.oracle.com/service/bpel/common"
         xmlns:ns5="http://www.gssamerica.com/mdm/loghandler"
         xmlns:client="http://www.gssamerica.com/mdm/Create_MDMRecords_BPELProcess"
         xmlns:ns6="http://www.gssamerica.com/mdm/services/MDMSearchRecord/"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ns11="http://www.gssamerica.com/mdm/errorhandler"
         xmlns:ns9="http://www.gssamerica.com/mdm/workflowservice"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ns1="http://xmlns.oracle.com/pcbpel/adapter/jms/AuditService/"
         xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions"
         xmlns:ns3="http://www.gssamerica.com/mdm/services"
         xmlns:ns2="http://www.gssamerica.com/mdm/audithandler"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:ns10="http://xmlns.oracle.com/pcbpel/adapter/jms/ExceptionService/"
         xmlns:ns8="http://xmlns.oracle.com/pcbpel/adapter/jms/WorkFlowService/">
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <partnerLinks>
    <partnerLink name="client"
                 partnerLinkType="client:Create_MDMRecords_BPELProcess"
                 myRole="Create_MDMRecords_BPELProcessProvider"/>
    <partnerLink name="AuditService"
                 partnerRole="Produce_Message_To_MDMAuditQueue_role"
                 partnerLinkType="ns1:Produce_Message_To_MDMAuditQueue_plt"/>
    <partnerLink name="LogService"
                 partnerRole="Produce_Message_To_LogMDMQueue_role"
                 partnerLinkType="ns4:Produce_Message_To_LogMDMQueue_plt"/>
    <partnerLink name="MDMSearchRecord" partnerRole="MDMSearchRecord_Role"
                 partnerLinkType="ns6:MDMSearchRecord_PL"/>
    <partnerLink name="WorkFlowService"
                 partnerRole="Produce_Message_To_WorkFlowQueue_role"
                 partnerLinkType="ns8:Produce_Message_To_WorkFlowQueue_plt"/>
    <partnerLink name="ExceptionService"
                 partnerRole="Produce_Message_To_MDMExceptionQueue_role"
                 partnerLinkType="ns10:Produce_Message_To_MDMExceptionQueue_plt"/>
  </partnerLinks>
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <!-- Reference to the message that will be returned to the requester-->
    <variable name="inputVariable"
              messageType="client:Create_MDMRecords_BPELProcessRequestMessage"/>
    <variable name="outputVariable"
              messageType="client:Create_MDMRecords_BPELProcessResponseMessage"/>
    <variable name="createRecordCounter" type="xsd:int"/>
    <variable name="userId" type="xsd:string"/>
    <variable name="createdDateTime" type="xsd:dateTime"/>
    <variable name="processId" type="xsd:string"/>
    <variable name="processName" type="xsd:string"/>
    <variable name="processDescription" type="xsd:string"/>
    <variable name="projectName" type="xsd:string"/>
    <variable name="transactionId" type="xsd:string"/>
    <variable name="source" type="xsd:string"/>
    <variable name="sourceDescription" type="xsd:string"/>
    <variable name="statusFlag" type="xsd:string"/>
    <variable name="businessKey" type="xsd:string"/>
    <variable name="destination" type="xsd:string"/>
    <variable name="environment" type="xsd:string"/>
    <variable name="errorInputData" type="xsd:string"/>
    <variable name="errorAction" type="xsd:string"/>
    <variable name="errorMessage" type="xsd:string"/>
    <variable name="errorMessageCode" type="xsd:string"/>
    <variable name="errorType" type="xsd:string"/>
    <variable name="errorId" type="xsd:string"/>
    <variable name="dateTime" type="xsd:string"/>
    <variable name="stackTrace" type="xsd:string"/>
    <variable name="ExchangeFormat" type="xsd:string"/>
    <variable name="remediationQueue" type="xsd:string"/>
    <variable name="logType" type="xsd:string"/>
    <variable name="logMessage" type="xsd:string"/>
    <variable name="logLevel" type="xsd:string"/>
    <variable name="location" type="xsd:string"/>
    <variable name="logMaxSize" type="xsd:int"/>
    <variable name="fileNameAddOn" type="xsd:string"/>
    <variable name="remoteKeyFoundCounter" type="xsd:int"/>
    <variable name="remoteKeyNotFoundCounter" type="xsd:int"/>
    <variable name="RKeyFoundOutput" type="xsd:string"/>
    <variable name="RKeyNotFoundOutput" type="xsd:string"/>
    <variable name="remoteKeyFlag" type="xsd:string"/>
    <variable name="CreateRecordOutput" type="xsd:string"/>
    <variable name="Invoke_AuditService_InputVariable"
              messageType="ns1:auditRequest_msg"/>
    <variable name="Invoke_LogService_InputVariable"
              messageType="ns4:logRequests_msg"/>
    <variable name="Invoke_WorkFlowQueue_InputVariable"
              messageType="ns8:WorkflowRequest_msg"/>
    <variable name="BindingFaultVar" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="remoteFaultVar" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="Invoke_MDMExceptionService_InputVariable"
              messageType="ns10:ErrorHandlerRequests_msg"/>
    <variable name="externalParameter" element="ns12:parameters"/>
    <variable name="bpel_xsltParmVariable" element="ns12:parameters"/>
    <variable name="log_Data" type="xsd:string"/>
  </variables>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <faultHandlers>
    <catch faultName="bpelx:bindingFault" faultVariable="BindingFaultVar">
      <sequence name="Sequence_10">
        <assign name="Assign_MDMException_Binding">
          <copy>
            <from variable="errorInputData"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/InputData"/>
          </copy>
          <copy>
            <from variable="processName"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ProcessName"/>
          </copy>
          <copy>
            <from expression="string('BindingException')"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Type"/>
          </copy>
          <copy>
            <from variable="errorId"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ErrorID"/>
          </copy>
          <copy>
            <from variable="environment"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Environment"/>
          </copy>
          <copy>
            <from variable="errorAction"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Action"/>
          </copy>
          <copy>
            <from variable="errorMessage"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ErrorMessage"/>
          </copy>
          <copy>
            <from variable="errorMessageCode"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ErrorMessageCode"/>
          </copy>
          <copy>
            <from variable="createdDateTime"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/createdDateTime"/>
          </copy>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/ns3:CreateRecordsRequest"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Data"/>
          </copy>
          <copy>
            <from variable="transactionId"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/TransactionID"/>
          </copy>
          <copy>
            <from variable="processId"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ProcessID"/>
          </copy>
          <copy>
            <from variable="source"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Source"/>
          </copy>
        </assign>
        <invoke name="Invoke_MDMException_Binding"
                partnerLink="ExceptionService"
                portType="ns10:Produce_Message_To_MDMExceptionQueue_ptt"
                operation="Produce_Message_To_MDMExceptionQueue"
                inputVariable="Invoke_MDMExceptionService_InputVariable"/>
      </sequence>
    </catch>
    <catch faultName="bpelx:remoteFault" faultVariable="remoteFaultVar">
      <sequence name="Sequence_9">
        <assign name="Assign_MDMException_Remote">
          <copy>
            <from variable="errorInputData"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/InputData"/>
          </copy>
          <copy>
            <from variable="processName"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ProcessName"/>
          </copy>
          <copy>
            <from expression="string('RemoteException')"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Type"/>
          </copy>
          <copy>
            <from variable="errorId"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ErrorID"/>
          </copy>
          <copy>
            <from variable="environment"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Environment"/>
          </copy>
          <copy>
            <from variable="errorAction"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Action"/>
          </copy>
          <copy>
            <from variable="errorMessage"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ErrorMessage"/>
          </copy>
          <copy>
            <from variable="errorMessageCode"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ErrorMessageCode"/>
          </copy>
          <copy>
            <from variable="createdDateTime"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/createdDateTime"/>
          </copy>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/ns3:CreateRecordsRequest"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Data"/>
          </copy>
          <copy>
            <from variable="processId"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ProcessID"/>
          </copy>
          <copy>
            <from variable="transactionId"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/TransactionID"/>
          </copy>
          <copy>
            <from variable="source"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Source"/>
          </copy>
        </assign>
        <invoke name="Invoke_MDMException_Remote" partnerLink="ExceptionService"
                portType="ns10:Produce_Message_To_MDMExceptionQueue_ptt"
                operation="Produce_Message_To_MDMExceptionQueue"
                inputVariable="Invoke_MDMExceptionService_InputVariable"/>
      </sequence>
    </catch>
    <catchAll>
      <sequence name="Sequence_11">
        <assign name="Assign_MDMException">
          <copy>
            <from variable="errorInputData"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/InputData"/>
          </copy>
          <copy>
            <from variable="processName"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ProcessName"/>
          </copy>
          <copy>
            <from expression="string('AllException')"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Type"/>
          </copy>
          <copy>
            <from variable="errorId"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ErrorID"/>
          </copy>
          <copy>
            <from variable="environment"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Environment"/>
          </copy>
          <copy>
            <from variable="errorAction"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Action"/>
          </copy>
          <copy>
            <from variable="errorMessage"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ErrorMessage"/>
          </copy>
          <copy>
            <from variable="errorMessageCode"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ErrorMessageCode"/>
          </copy>
          <copy>
            <from variable="createdDateTime"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/createdDateTime"/>
          </copy>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/ns3:CreateRecordsRequest"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Data"/>
          </copy>
          <copy>
            <from variable="processId"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/ProcessID"/>
          </copy>
          <copy>
            <from variable="source"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/Source"/>
          </copy>
          <copy>
            <from variable="transactionId"/>
            <to variable="Invoke_MDMExceptionService_InputVariable"
                part="ErrorHandlerRequests"
                query="/ns11:ErrorHandlerRequests/ErrorHandlerRequest/TransactionID"/>
          </copy>
        </assign>
        <invoke name="Invoke_MDMEXception" partnerLink="ExceptionService"
                portType="ns10:Produce_Message_To_MDMExceptionQueue_ptt"
                operation="Produce_Message_To_MDMExceptionQueue"
                inputVariable="Invoke_MDMExceptionService_InputVariable"/>
      </sequence>
    </catchAll>
  </faultHandlers>
  <sequence name="main">
    <!-- Receive input from requestor. (Note: This maps to operation defined in Create_MDMRecords_BPELProcess.wsdl) -->
    <receive name="receiveInput" partnerLink="client"
             portType="client:Create_MDMRecords_BPELProcess" operation="process"
             variable="inputVariable" createInstance="yes"/>
    <!-- Generate reply to synchronous request -->
    <assign name="Assign_GlobalVariables">
      <copy>
        <from expression="bpws:getVariableData('inputVariable','payload','/ns3:CreateRecordsRequest/ns3:configData/ns3:element[ns3:name=&quot;userID&quot;]/ns3:value')"/>
        <to variable="userId"/>
      </copy>
      <copy>
        <from expression="xp20:current-dateTime()"/>
        <to variable="createdDateTime"/>
      </copy>
      <copy>
        <from expression="string('MDM')"/>
        <to variable="projectName"/>
      </copy>
      <copy>
        <from expression="ora:getProcessId()"/>
        <to variable="processName"/>
      </copy>
      <copy>
        <from expression="bpws:getVariableData('inputVariable','payload','/ns3:CreateRecordsRequest/ns3:configData/ns3:element[ns3:name=&quot;transactionID&quot;]/ns3:value')"/>
        <to variable="transactionId"/>
      </copy>
      <copy>
        <from expression="string('CreateStatus')"/>
        <to variable="statusFlag"/>
      </copy>
      <copy>
        <from expression="bpws:getVariableData('inputVariable','payload','/ns3:CreateRecordsRequest/ns3:configData/ns3:element[ns3:name=&quot;srcID&quot;]/ns3:value')"/>
        <to variable="source"/>
      </copy>
      <copy>
        <from expression="string('MDMSystemIP')"/>
        <to variable="destination"/>
      </copy>
      <copy>
        <from expression="ora:getInstanceId()"/>
        <to variable="processId"/>
      </copy>
      <copy>
        <from expression="string('Info')"/>
        <to variable="logType"/>
      </copy>
      <copy>
        <from expression="string('ready to invoke loolup service')"/>
        <to variable="logMessage"/>
      </copy>
      <copy>
        <from expression="string('initial')"/>
        <to variable="logLevel"/>
      </copy>
      <copy>
        <from expression="string('Testing Server')"/>
        <to variable="environment"/>
      </copy>
      <copy>
        <from expression="string('create BPEL Process')"/>
        <to variable="location"/>
      </copy>
      <copy>
        <from expression="0"/>
        <to variable="createRecordCounter"/>
      </copy>
      <copy>
        <from expression="0"/>
        <to variable="remoteKeyFoundCounter"/>
      </copy>
      <copy>
        <from expression="0"/>
        <to variable="remoteKeyNotFoundCounter"/>
      </copy>
      <copy>
        <from expression="string('inputData')"/>
        <to variable="errorInputData"/>
      </copy>
      <copy>
        <from expression="string('NO Action')"/>
        <to variable="errorAction"/>
      </copy>
      <copy>
        <from expression="string('ErrorMessage')"/>
        <to variable="errorMessage"/>
      </copy>
      <copy>
        <from expression="string('EX101')"/>
        <to variable="errorMessageCode"/>
      </copy>
      <copy>
        <from expression="string('err101')"/>
        <to variable="errorId"/>
      </copy>
      <copy>
        <from expression='string("businesskey")'/>
        <to variable="businessKey"/>
      </copy>
      <copy>
        <from expression='string("dummy src description")'/>
        <to variable="sourceDescription"/>
      </copy>
      <copy>
        <from expression='string("BPEL Process to create MDM Entity")'/>
        <to variable="processDescription"/>
      </copy>
      <copy>
        <from expression="bpws:getVariableData('inputVariable','payload','/ns3:CreateRecordsRequest/ns3:configData/ns3:element[ns3:name=&quot;srcID&quot;]/ns3:value')"/>
        <to variable="remoteKeyFlag"/>
      </copy>
      <copy>
        <from expression='string("Log Data")'/>
        <to variable="log_Data"/>
      </copy>
    </assign>
    <scope name="Initial_AuditLog_Scope">
      <sequence name="Sequence_1">
        <assign name="Assign_AuditService_From_AuditLogScope">
          <copy>
            <from variable="userId"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/userId"/>
          </copy>
          <copy>
            <from variable="createdDateTime"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/createdDateTime"/>
          </copy>
          <copy>
            <from variable="projectName"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/projectName"/>
          </copy>
          <copy>
            <from variable="processName"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/processName"/>
          </copy>
          <copy>
            <from variable="transactionId"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/transactionId"/>
          </copy>
          <copy>
            <from variable="statusFlag"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/statusFlag"/>
          </copy>
          <copy>
            <from variable="source"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/source"/>
          </copy>
          <copy>
            <from variable="destination"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/destination"/>
          </copy>
          <copy>
            <from variable="inputVariable" part="payload"
                  query="/ns3:CreateRecordsRequest"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/oldRecord"/>
          </copy>
          <copy>
            <from variable="sourceDescription"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/sourceDescription"/>
          </copy>
          <copy>
            <from variable="processDescription"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/processDescription"/>
          </copy>
          <copy>
            <from variable="businessKey"/>
            <to variable="Invoke_AuditService_InputVariable" part="auditRequest"
                query="/ns2:auditRequest/auditData/businessKey"/>
          </copy>
        </assign>
        <invoke name="Invoke_AuditService_From_AuditLogScope"
                partnerLink="AuditService"
                portType="ns1:Produce_Message_To_MDMAuditQueue_ptt"
                operation="Produce_Message_To_MDMAuditQueue"
                inputVariable="Invoke_AuditService_InputVariable"/>
        <assign name="Assign_LogService_From_AuditLogScope">
          <copy>
            <from variable="processId"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/ProcessId"/>
          </copy>
          <copy>
            <from variable="logType"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/LogType"/>
          </copy>
          <copy>
            <from variable="logMessage"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/LogMessage"/>
          </copy>
          <copy>
            <from variable="environment"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/Environment"/>
          </copy>
          <copy>
            <from variable="projectName"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/ProjectName"/>
          </copy>
          <copy>
            <from variable="processName"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/ProcessName"/>
          </copy>
          <copy>
            <from variable="location"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/Location"/>
          </copy>
          <copy>
            <from variable="logLevel"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/LogLevel"/>
          </copy>
          <copy>
            <from variable="transactionId"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/TransactionID"/>
          </copy>
          <copy>
            <from variable="createdDateTime"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/createdDateTime"/>
          </copy>
          <copy>
            <from variable="log_Data"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/LogData"/>
          </copy>
          <copy>
            <from variable="statusFlag"/>
            <to variable="Invoke_LogService_InputVariable" part="logRequests"
                query="/ns5:LogRequests/LogRequest/statusFlag"/>
          </copy>
        </assign>
        <invoke name="Invoke_LogService_From_AuditLogScope"
                partnerLink="LogService"
                portType="ns4:Produce_Message_To_LogMDMQueue_ptt"
                operation="Produce_Message_To_LogMDMQueue"
                inputVariable="Invoke_LogService_InputVariable"/>
      </sequence>
    </scope>
    <scope name="LookUp_Scope">
      <variables>
        <variable name="noOfRecords" type="xsd:int"/>
        <variable name="Invoke_searchRecord_InputVariable"
                  messageType="ns6:SearchRecordRequest"/>
        <variable name="Invoke_searchRecord_OutputVariable"
                  messageType="ns6:SearchRecordResponse"/>
        <variable name="LookupRecordRequest_InputVariable"
                  messageType="client:Create_MDMRecords_BPELProcessRequestMessage"/>
        <variable name="recordIndex" type="xsd:int"/>
        <variable name="createOutputStatus" type="xsd:string"/>
        <variable name="ResponseRecordId" type="xsd:string"/>
      </variables>
      <sequence name="Sequence_2">
        <assign name="Assign_IncrementValue">
          <copy>
            <from expression="ora:countNodes('inputVariable','payload','/ns3:CreateRecordsRequest/ns3:record')"/>
            <to variable="noOfRecords"/>
          </copy>
          <copy>
            <from expression="1"/>
            <to variable="recordIndex"/>
          </copy>
        </assign>
        <while name="While_1" condition="bpws:getVariableData('noOfRecords')>0">
          <sequence name="Sequence_3">
            <assign name="Assign_InvokeSearch">
              <copy>
                <from expression="bpws:getVariableData('inputVariable','payload')/ns3:record[bpws:getVariableData('recordIndex')]"/>
                <to variable="LookupRecordRequest_InputVariable"
                    query="/ns3:CreateRecordsRequest/ns3:record"
                    part="payload"/>
              </copy>
              <copy>
                <from variable="inputVariable" part="payload"
                      query="/ns3:CreateRecordsRequest/ns3:repositoryInfo"/>
                <to variable="LookupRecordRequest_InputVariable" part="payload"
                    query="/ns3:CreateRecordsRequest/ns3:repositoryInfo"/>
              </copy>
              <copy>
                <from variable="inputVariable" part="payload"
                      query="/ns3:CreateRecordsRequest/ns3:configData"/>
                <to variable="LookupRecordRequest_InputVariable" part="payload"
                    query="/ns3:CreateRecordsRequest/ns3:configData"/>
              </copy>
              <copy>
                <from expression="bpws:getVariableData('noOfRecords')-1"/>
                <to variable="noOfRecords"/>
              </copy>
              <copy>
                <from expression="bpws:getVariableData('recordIndex')+1"/>
                <to variable="recordIndex"/>
              </copy>
            </assign>
            <assign name="LookUp_Transformation">
              <bpelx:annotation>
                <bpelx:pattern>transformation</bpelx:pattern>
              </bpelx:annotation>
              <copy>
                <from expression="ora:processXSLT('LookUp_Transformation.xsl',bpws:getVariableData('LookupRecordRequest_InputVariable','payload'))"/>
                <to variable="Invoke_searchRecord_InputVariable"
                    part="SearchRecordRequest"/>
              </copy>
            </assign>
            <invoke name="Invoke_SearchRecord" partnerLink="MDMSearchRecord"
                    portType="ns6:MDMSearchRecord" operation="searchRecord"
                    inputVariable="Invoke_searchRecord_InputVariable"
                    outputVariable="Invoke_searchRecord_OutputVariable"/>
            <switch name="LookupResult_Switch">
              <case condition="ora:countNodes('Invoke_searchRecord_OutputVariable','RecordExistResponse','/ns3:ServiceReply/ns3:executionStatus')>0">
                <sequence name="Sequence_6">
                  <assign name="Assign_RecordId">
                    <copy>
                      <from expression="bpws:getVariableData('Invoke_searchRecord_OutputVariable','RecordExistResponse','/ns3:ServiceReply/ns3:executionStatus/ns3:dataObjectId[1]/ns3:recordId')"/>
                      <to variable="ResponseRecordId"/>
                    </copy>
                    <copy>
                      <from variable="ResponseRecordId"/>
                      <to variable="LookupRecordRequest_InputVariable"
                          part="payload"
                          query="/ns3:CreateRecordsRequest/ns3:record[1]/ns3:recordIdentifier/ns3:recordId"/>
                    </copy>
                  </assign>
                  <scope name="RemoteKey_Scope">
                    <variables>
                      <variable name="remoteKeyFoundParameters"
                                element="ns12:parameters"/>
                      <variable name="remoteKeyNotFoundParameters"
                                element="ns12:parameters"/>
                    </variables>
                    <switch name="RemoteKey_Switch">
                      <case condition="bpws:getVariableData('remoteKeyFlag')=bpws:getVariableData('Invoke_searchRecord_OutputVariable','RecordExistResponse','/ns3:ServiceReply/ns3:executionStatus/ns3:dataObjectId/ns3:remoteKey/ns3:remoteSystem')">
                        <sequence name="Sequence_7">
                          <assign name="Transform_Workflow_RKeyFound">
                            <copy>
                              <from>
                                <tns:parameters xmlns="http://schemas.oracle.com/service/bpel/common"
                                                xmlns:tns="http://schemas.oracle.com/service/bpel/common"
                                                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                  <tns:item>
                                    <tns:name>operation</tns:name>
                                    <tns:value>update</tns:value>
                                  </tns:item>
                                  <tns:item>
                                    <tns:name>srcID</tns:name>
                                    <tns:value>CRM-1</tns:value>
                                  </tns:item>
                                  <tns:item>
                                    <tns:name>entity</tns:name>
                                    <tns:value>Customer</tns:value>
                                  </tns:item>
                                  <tns:item>
                                    <tns:name>entitystatus</tns:name>
                                    <tns:value>RemoteKeyFound</tns:value>
                                  </tns:item>
                                </tns:parameters>
                              </from>
                              <to variable="remoteKeyFoundParameters"/>
                            </copy>
                            <copy>
                              <from expression="ora:processXSLT('Transformation_Workflow_RKeyFound.xsl',bpws:getVariableData('LookupRecordRequest_InputVariable','payload'),bpws:getVariableData('remoteKeyFoundParameters'))"/>
                              <to variable="Invoke_WorkFlowQueue_InputVariable"
                                  part="WorkflowRequest"
                                  query="/ns9:WorkflowRequest"/>
                            </copy>
                          </assign>
                          <invoke name="Invoke_WorkFlowService_From_RKeyFoundScope"
                                  partnerLink="WorkFlowService"
                                  portType="ns8:Produce_Message_To_WorkFlowQueue_ptt"
                                  operation="Produce_Message_To_WorkFlowQueue"
                                  inputVariable="Invoke_WorkFlowQueue_InputVariable"/>
                          <assign name="Assign_From_RKeyFound">
                            <copy>
                              <from expression="bpws:getVariableData('remoteKeyFoundCounter')+1"/>
                              <to variable="remoteKeyFoundCounter"/>
                            </copy>
                            <copy>
                              <from expression="concat(bpws:getVariableData('remoteKeyFoundCounter'),&quot;record has been sent to work flow for replication&quot;)"/>
                              <to variable="RKeyFoundOutput"/>
                            </copy>
                          </assign>
                        </sequence>
                      </case>
                      <otherwise>
                        <sequence name="Sequence_8">
                          <assign name="Transform_Workflow_RKeyNotFound">
                            <copy>
                              <from>
                                <tns:parameters xmlns="http://schemas.oracle.com/service/bpel/common"
                                                xmlns:tns="http://schemas.oracle.com/service/bpel/common"
                                                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                  <tns:item>
                                    <tns:name>operation</tns:name>
                                    <tns:value>create</tns:value>
                                  </tns:item>
                                  <tns:item>
                                    <tns:name>srcID</tns:name>
                                    <tns:value>CRM-1</tns:value>
                                  </tns:item>
                                  <tns:item>
                                    <tns:name>entity</tns:name>
                                    <tns:value>Customer</tns:value>
                                  </tns:item>
                                  <tns:item>
                                    <tns:name>entitystatus</tns:name>
                                    <tns:value>RemoteKeyNotFound</tns:value>
                                  </tns:item>
                                </tns:parameters>
                              </from>
                              <to variable="remoteKeyNotFoundParameters"/>
                            </copy>
                            <copy>
                              <from expression="ora:processXSLT('Transform_Workflow_RKeyNotFound.xsl',bpws:getVariableData('LookupRecordRequest_InputVariable','payload'),bpws:getVariableData('remoteKeyNotFoundParameters'))"/>
                              <to variable="Invoke_WorkFlowQueue_InputVariable"
                                  part="WorkflowRequest"
                                  query="/ns9:WorkflowRequest"/>
                            </copy>
                          </assign>
                          <invoke name="Invoke_WorkFlowService_From_RKeyNotFound"
                                  partnerLink="WorkFlowService"
                                  portType="ns8:Produce_Message_To_WorkFlowQueue_ptt"
                                  operation="Produce_Message_To_WorkFlowQueue"
                                  inputVariable="Invoke_WorkFlowQueue_InputVariable"/>
                          <assign name="Assign_From_RKeyNotFound">
                            <copy>
                              <from expression="bpws:getVariableData('remoteKeyNotFoundCounter')+1"/>
                              <to variable="remoteKeyNotFoundCounter"/>
                            </copy>
                            <copy>
                              <from expression="concat(bpws:getVariableData('remoteKeyNotFoundCounter'),&quot;record doesnt not have remote key and it has been sent to workflow&quot;)"/>
                              <to variable="RKeyNotFoundOutput"/>
                            </copy>
                          </assign>
                        </sequence>
                      </otherwise>
                    </switch>
                  </scope>
                </sequence>
              </case>
              <otherwise>
                <sequence name="Sequence_4">
                  <scope name="CreateRecord_Scope">
                    <variables>
                      <variable name="createRecordParameters"
                                element="ns12:parameters"/>
                    </variables>
                    <sequence name="Sequence_5">
                      <assign name="Transform_WorkFlow_CreateRecord">
                        <copy>
                          <from>
                            <tns:parameters xmlns="http://schemas.oracle.com/service/bpel/common"
                                            xmlns:tns="http://schemas.oracle.com/service/bpel/common"
                                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                              <tns:item>
                                <tns:name>operation</tns:name>
                                <tns:value>create</tns:value>
                              </tns:item>
                              <tns:item>
                                <tns:name>srcID</tns:name>
                                <tns:value>CRM-1</tns:value>
                              </tns:item>
                              <tns:item>
                                <tns:name>entity</tns:name>
                                <tns:value>Customer</tns:value>
                              </tns:item>
                              <tns:item>
                                <tns:name>entitystatus</tns:name>
                                <tns:value>new</tns:value>
                              </tns:item>
                            </tns:parameters>
                          </from>
                          <to variable="createRecordParameters"/>
                        </copy>
                        <copy>
                          <from expression="ora:processXSLT('Transformation_WorkFlowService.xsl',bpws:getVariableData('LookupRecordRequest_InputVariable','payload'),bpws:getVariableData('createRecordParameters'))"/>
                          <to variable="Invoke_WorkFlowQueue_InputVariable"
                              part="WorkflowRequest"
                              query="/ns9:WorkflowRequest"/>
                        </copy>
                      </assign>
                      <invoke name="Invoke_WorkFlowService_CreateRecord"
                              partnerLink="WorkFlowService"
                              portType="ns8:Produce_Message_To_WorkFlowQueue_ptt"
                              operation="Produce_Message_To_WorkFlowQueue"
                              inputVariable="Invoke_WorkFlowQueue_InputVariable"/>
                      <assign name="Assign_From_CreateRecord">
                        <bpelx:append>
                          <bpelx:from expression='string("create")'/>
                          <bpelx:to variable="outputVariable" part="payload"
                                    query="/ns3:ServiceReply/ns3:executionStatus/ns3:status"/>
                        </bpelx:append>
                        <copy>
                          <from expression="bpws:getVariableData('createRecordCounter')+1"/>
                          <to variable="createRecordCounter"/>
                        </copy>
                        <copy>
                          <from expression="concat(bpws:getVariableData('createRecordCounter'),&quot;Record has been sent to work flow for insertion&quot;)"/>
                          <to variable="CreateRecordOutput"/>
                        </copy>
                      </assign>
                    </sequence>
                  </scope>
                </sequence>
              </otherwise>
            </switch>
          </sequence>
        </while>
      </sequence>
    </scope>
    <assign name="Assign_Output">
      <copy>
        <from expression="concat(bpws:getVariableData('CreateRecordOutput'),' ',bpws:getVariableData('RKeyFoundOutput'),' ',bpws:getVariableData('RKeyNotFoundOutput'))"/>
        <to variable="outputVariable" part="payload"
            query="/ns3:ServiceReply/ns3:executionStatus/ns3:status"/>
      </copy>
    </assign>
    <reply name="replyOutput" partnerLink="client"
           portType="client:Create_MDMRecords_BPELProcess" operation="process"
           variable="outputVariable"/>
  </sequence>
</process>